/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gscinema;

import java.awt.Image;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author e-hen
 */
public class StaffMenu extends javax.swing.JFrame {
    private Staff stf;
    private Database db;
    private String movieid_Remove;
    private String showid_Remove;
    private String foodid_Remove;
    String p;
    /**
     * Creates new form StaffMenu
     * @param stf
     * @param db
     */
    public StaffMenu(Staff stf, Database db) {
        initComponents();
        this.stf = stf;
        this.db = db;
        
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        
        ImageIcon icon = new ImageIcon("C:\\Users\\e-hen\\Documents\\NetBeansProjects\\GSCinema\\src\\gscinema\\GSC-Cinema-Vector-Logo.png");
        Image img = icon.getImage();
        Image imgScale = img.getScaledInstance(GSCTitle.getWidth(), GSCTitle.getHeight(),Image.SCALE_SMOOTH);
        ImageIcon scaledIcon = new ImageIcon(imgScale);
        GSCTitle.setIcon(scaledIcon);
        
        //welcome text
        welcomestaff.setText(stf.getName() + " (Staff)");
        
        //ADD MOVIES TAB
        //show movies
        DefaultTableModel tblModel = (DefaultTableModel)MovieTable.getModel();
        refreshMovie(tblModel);
        
        //set default release date as today's date
        try {
            Date temp = new Date();
            SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyy");
            String tempdate = sdf.format(temp);
            Date current = new SimpleDateFormat("dd-MM-yyy").parse(tempdate);
            releasedate1.setDate(current);

        } catch (ParseException ex) {
            Logger.getLogger(CustomerMenu.class.getName()).log(Level.SEVERE, null, ex);
        }

        //ADD SHOW TAB
        //Display shows
        DefaultTableModel tblModel2 = (DefaultTableModel)ShowTable.getModel();
        refreshShows(tblModel2);
        
        //Combo Box Movie
        movieComboBox();
        
        //Combo Box Theatre
        try{
            ArrayList<String> theatreid = new ArrayList<>();
            ArrayList<String> tsize = new ArrayList<>();
            Statement stm = db.getConnection().createStatement();
            String sql = "SELECT * FROM theatre ORDER BY theatreid ASC";
            ResultSet rs = stm.executeQuery(sql);
            while(rs.next()){
                theatreid.add(String.valueOf(rs.getInt("theatreid")));
                tsize.add(rs.getString("size"));
            }
            String[] combine = new String[theatreid.size()];
            for(int i = 0; i < tsize.size(); i++){
                combine[i] = theatreid.get(i) + " (" + tsize.get(i) + ") ";
            }
            for(String item : combine){
                theatre3.addItem(item);
            }
        } catch (SQLException ex) {
            Logger.getLogger(CustomerMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //food and beverages table
        DefaultTableModel tblModel3 = (DefaultTableModel)fnbtable.getModel();
        refreshMenu(tblModel3);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        LogoutButton = new javax.swing.JButton();
        GSCTitle = new javax.swing.JLabel();
        welcomestaff = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        MovieTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        title1 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        releasedate1 = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        casts1 = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        synopsis1 = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        duration1 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        price1 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        type1 = new javax.swing.JComboBox<>();
        AddMovieButton = new javax.swing.JButton();
        ClearAddMovieFieldsButton = new javax.swing.JButton();
        refreshMovieTableButton = new javax.swing.JButton();
        RemoveSelectedMovieButton = new javax.swing.JButton();
        imagelabel = new javax.swing.JLabel();
        browseImage = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        ShowTable = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        movie3 = new javax.swing.JComboBox<>();
        theatre3 = new javax.swing.JComboBox<>();
        sdate3 = new com.toedter.calendar.JDateChooser();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        stime3 = new javax.swing.JTextField();
        AddShowButton = new javax.swing.JButton();
        RemoveSelectedShowButton = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        fnbtable = new javax.swing.JTable();
        deletemenu = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        menuName = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        menuDescription = new javax.swing.JTextArea();
        menuPrice = new javax.swing.JTextField();
        addMenuButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 153));

        LogoutButton.setText("Logout");
        LogoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogoutButtonActionPerformed(evt);
            }
        });

        GSCTitle.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        GSCTitle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        welcomestaff.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        welcomestaff.setText("(Staff)");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(GSCTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(welcomestaff, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(LogoutButton)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(welcomestaff, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(GSCTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LogoutButton, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE))
                .addContainerGap())
        );

        MovieTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Movie ID", "Title", "Release Date", "Casts", "Synopsis", "Duration", "Price", "Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        MovieTable.setRowHeight(40);
        MovieTable.getTableHeader().setReorderingAllowed(false);
        MovieTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MovieTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(MovieTable);

        jLabel2.setText("Movie Title:");

        jLabel4.setText("Release Date:");

        releasedate1.setDateFormatString("dd-MM-yyyy");

        jLabel5.setText("Casts:");

        casts1.setColumns(20);
        casts1.setLineWrap(true);
        casts1.setRows(3);
        casts1.setTabSize(4);
        casts1.setWrapStyleWord(true);
        jScrollPane2.setViewportView(casts1);

        jLabel6.setText("Synopsis:");

        synopsis1.setColumns(20);
        synopsis1.setLineWrap(true);
        synopsis1.setRows(5);
        synopsis1.setWrapStyleWord(true);
        jScrollPane3.setViewportView(synopsis1);

        jLabel7.setText("Duration:");

        jLabel8.setText("Price:");

        jLabel9.setText("Type:");

        type1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Normal", "Premium" }));

        AddMovieButton.setText("Add Movie");
        AddMovieButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddMovieButtonActionPerformed(evt);
            }
        });

        ClearAddMovieFieldsButton.setText("Clear ");
        ClearAddMovieFieldsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearAddMovieFieldsButtonActionPerformed(evt);
            }
        });

        refreshMovieTableButton.setText("Refresh");
        refreshMovieTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshMovieTableButtonActionPerformed(evt);
            }
        });

        RemoveSelectedMovieButton.setText("Remove Selected Movie");
        RemoveSelectedMovieButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveSelectedMovieButtonActionPerformed(evt);
            }
        });

        imagelabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        browseImage.setText("Browse");
        browseImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseImageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(RemoveSelectedMovieButton, javax.swing.GroupLayout.DEFAULT_SIZE, 891, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(title1)
                            .addComponent(releasedate1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE)
                            .addComponent(jScrollPane3)
                            .addComponent(duration1)
                            .addComponent(price1)
                            .addComponent(type1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(refreshMovieTableButton, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(imagelabel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(browseImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(AddMovieButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(ClearAddMovieFieldsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RemoveSelectedMovieButton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(title1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(releasedate1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(jLabel6)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(duration1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(price1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(type1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(imagelabel, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(84, 84, 84)
                                .addComponent(browseImage)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(AddMovieButton)
                            .addComponent(refreshMovieTableButton)
                            .addComponent(ClearAddMovieFieldsButton))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        jTabbedPane1.addTab("Edit Movies", jPanel2);

        ShowTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Show ID", "Movie ID", "Title", "Theatre ID", "Theatre Size", "Show Date", "Show Time", "Price", "Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ShowTable.getTableHeader().setReorderingAllowed(false);
        ShowTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ShowTableMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(ShowTable);

        jLabel11.setText("Movie:");

        jLabel12.setText("Theatre:");

        sdate3.setDateFormatString("dd-MM-yyyy");

        jLabel14.setText("Show Date:");

        jLabel15.setText("Show Time:");

        AddShowButton.setText("Add Show");
        AddShowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddShowButtonActionPerformed(evt);
            }
        });

        RemoveSelectedShowButton.setText("Remove Selected Show");
        RemoveSelectedShowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveSelectedShowButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(RemoveSelectedShowButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 793, Short.MAX_VALUE))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sdate3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(theatre3, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(movie3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(stime3))
                        .addContainerGap())
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 282, Short.MAX_VALUE)
                        .addComponent(AddShowButton)
                        .addGap(280, 280, 280))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(111, 111, 111)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(movie3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(theatre3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(sdate3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15)
                            .addComponent(stime3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(55, 55, 55)
                        .addComponent(AddShowButton))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RemoveSelectedShowButton)
                .addContainerGap(115, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Edit Shows", jPanel4);

        fnbtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Food ID", "Name", "Description", "Price (RM)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        fnbtable.getTableHeader().setReorderingAllowed(false);
        fnbtable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fnbtableMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(fnbtable);

        deletemenu.setText("Delete Selected Menu");
        deletemenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletemenuActionPerformed(evt);
            }
        });

        jLabel1.setText("Name:");

        jLabel3.setText("Description:");

        jLabel10.setText("Price:");

        menuDescription.setColumns(20);
        menuDescription.setRows(5);
        jScrollPane4.setViewportView(menuDescription);

        addMenuButton.setText("Add Menu");
        addMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMenuButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 901, Short.MAX_VALUE)
                    .addComponent(deletemenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(menuName)
                            .addComponent(jScrollPane4)
                            .addComponent(menuPrice))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 179, Short.MAX_VALUE)
                        .addComponent(addMenuButton, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(153, 153, 153))))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deletemenu))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(menuName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(menuPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(addMenuButton)))
                .addContainerGap(228, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Food and Beverages", jPanel5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void LogoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogoutButtonActionPerformed
        Login log = new Login();
        log.setVisible(true);
        dispose();
    }//GEN-LAST:event_LogoutButtonActionPerformed

    private void RemoveSelectedShowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveSelectedShowButtonActionPerformed
        DefaultTableModel tblModel3 = (DefaultTableModel)ShowTable.getModel();
        deleteShows(showid_Remove);
        refreshShows(tblModel3);
    }//GEN-LAST:event_RemoveSelectedShowButtonActionPerformed

    private void AddShowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddShowButtonActionPerformed
        DefaultTableModel tblModel = (DefaultTableModel)ShowTable.getModel();
        //ADD SHOW BUTTON
        String showid = "";
        String movieidName = (String) movie3.getSelectedItem();
        //to get the movie id
        char[] tempmovie = movieidName.toCharArray();
        int counter = 0;
        for(int i = 0; i < tempmovie.length; i++){
            if(Character.isDigit(tempmovie[i]) == true){
                counter++;
            }else{
                break;
            }
        }
        String movieid = "";
        for(int i = 0; i < counter; i++){
            movieid += tempmovie[i];
        }
        String theatreid = (String) theatre3.getSelectedItem();
        //to get the theatre id at the first position
        theatreid = theatreid.substring(0, 1);
        
        String date = "";
        
        String time = stime3.getText();

        try{
            if(movieid.equals("")||theatreid.equals("")||time.equals("")){
                JOptionPane.showMessageDialog(this, "Please fill in the blank(s)");
                refreshShows(tblModel);
            }
            else{
                if (sdate3.getDate() == null ){
                    JOptionPane.showMessageDialog(this, "Invalid Date");
                    refreshShows(tblModel);
                    return;
                }else{
                   // format the date to ddmmyyyy
                   SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
                   Date tempdate = sdate3.getDate();
                   date = sdf.format(tempdate);
                } 
                
                if(valTime(time) == false){
                    JOptionPane.showMessageDialog(this, "Invalid Time Format");
                    refreshShows(tblModel);
                    return;
                }
                
                //check shows overlapping
                Statement stm = db.getConnection().createStatement();
                String sql = "SELECT * FROM shows WHERE theatreid = '" + theatreid + "' AND showdate = '" + date + "' AND showtime = '" + time + "'";
                ResultSet rs2 = stm.executeQuery(sql);

                if(rs2.next()){
                    JOptionPane.showMessageDialog(this, "Unavailable");
                }
                else{
                    String sql3 = "INSERT INTO SHOWS (movieid, theatreid, showdate, showtime) VALUES "+
                    "('" + movieid + "', '" + theatreid + "', '" + date + "', '" + time + "');";
                    PreparedStatement ps = db.getConnection().prepareStatement(sql3,Statement.RETURN_GENERATED_KEYS);
                    ps.execute();
                    ResultSet rs = ps.getGeneratedKeys();
                    while(rs.next()){
                        showid = String.valueOf(rs.getInt(1));
                    }

                    JOptionPane.showMessageDialog(this, "The show added succesfully");

                    //GENERATE TICKETS FOR ALL SEATS
                    //Identify the size of theatre
                    String temp = (String) theatre3.getSelectedItem();
                    String theatresize;
                    //exp -> 1 (30)  //  2 (100)  //  11 (50)    //    13 (100)
                    //       0123456     01234567     01234567         012345678
                    if(temp.substring(2,3).equals(" ") && temp.substring(7, 8).equals(")")){
                        theatresize = temp.substring(4, 7);
                    }
                    else if(temp.substring(2,3).equals(" ") && temp.substring(6, 7).equals(")")){
                        theatresize = temp.substring(4, 6);
                    }
                    else if(temp.substring(1, 2).equals(" ") && temp.substring(6, 7).equals(")")){
                        theatresize = temp.substring(3, 6);
                    }
                    else{
                        theatresize = temp.substring(3, 5);
                    }

                    int size = Integer.parseInt(theatresize);
                    char finalrow = 'E';
                    String[] seatnum = new String[size];
                    switch(size){
                        case 50 -> finalrow = 'E';
                        case 70 -> finalrow = 'G';
                        case 90 -> finalrow = 'I';
                    }
                    int count = 0;
                    for(char a = 'A'; a <= finalrow; a++){
                        for(int i = 1; i <= 10; i++){
                            if(count == size){
                                break;
                            }
                            seatnum[count] = a + String.valueOf(i);
                            count++;
                        }
                    }

                    String status = "Available";
                    for(int i = 0; i < size; i++){
                        Statement stmt2 = db.getConnection().createStatement();
                        String sql2 = "INSERT INTO seat (showid, seatnum, status) VALUES('" + showid + "', '" + seatnum[i] + "', '" + status + "');";
                        stmt2.executeUpdate(sql2);
                    }

                    //CLEAR FILLS
                    movie3.setSelectedIndex(0);
                    theatre3.setSelectedIndex(0);
                    //set to default date after adding a show
                    try {
                        Date temp2 = new Date();
                        SimpleDateFormat sdf2 = new SimpleDateFormat("dd-MM-yyy");
                        String tempdate = sdf2.format(temp2);
                        Date current = new SimpleDateFormat("dd-MM-yyy").parse(tempdate);
                        sdate3.setDate(current);
                    } catch (ParseException ex) {
                        Logger.getLogger(CustomerMenu.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    stime3.setText("");

                    //REFRESH TABLE
                    refreshShows(tblModel);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(StaffMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_AddShowButtonActionPerformed

    private void ShowTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ShowTableMouseClicked
        DefaultTableModel model = (DefaultTableModel)ShowTable.getModel();
        int selectedRowIndex = ShowTable.getSelectedRow();
        showid_Remove = model.getValueAt(selectedRowIndex, 0).toString();
    }//GEN-LAST:event_ShowTableMouseClicked

    private void RemoveSelectedMovieButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveSelectedMovieButtonActionPerformed
        DefaultTableModel tblModel1 = (DefaultTableModel)MovieTable.getModel();
        DefaultTableModel tblModel2 = (DefaultTableModel)ShowTable.getModel();

        deleteMovie(movieid_Remove);
        //refresh movie table
        refreshMovie(tblModel1);
        //refresh show table
        refreshShows(tblModel2);
        //refresh movie combo box
        movieComboBox();
    }//GEN-LAST:event_RemoveSelectedMovieButtonActionPerformed

    private void refreshMovieTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshMovieTableButtonActionPerformed
        DefaultTableModel tblModel = (DefaultTableModel)MovieTable.getModel();
        refreshMovie(tblModel);
    }//GEN-LAST:event_refreshMovieTableButtonActionPerformed

    private void ClearAddMovieFieldsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearAddMovieFieldsButtonActionPerformed
        title1.setText("");
        try {
            Date temp = new Date();
            SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyy");
            String tempdate = sdf.format(temp);
            Date current = new SimpleDateFormat("dd-MM-yyy").parse(tempdate);
            releasedate1.setDate(current);

        } catch (ParseException ex) {
            Logger.getLogger(CustomerMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
        casts1.setText("");
        synopsis1.setText("");
        duration1.setText("");
        price1.setText("");
        imagelabel.setIcon(null);
    }//GEN-LAST:event_ClearAddMovieFieldsButtonActionPerformed

    private void AddMovieButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddMovieButtonActionPerformed
        DefaultTableModel tblModel = (DefaultTableModel)MovieTable.getModel();
        clearTable(tblModel);

        try{
            String title2 = title1.getText();
            SimpleDateFormat s = new SimpleDateFormat("dd-MM-yyyy");
            String date2 = s.format(releasedate1.getDate());
            String casts2 = casts1.getText();
            String synopsis2 = synopsis1.getText();
            String duration2 = duration1.getText();
            String price2 = price1.getText();
            String type2 = (String) type1.getSelectedItem();
            

            if(title2.equals("")||date2.equals("")||casts2.equals("")||synopsis2.equals("")||duration2.equals("")||price2.equals("")||type2.equals("")){
                JOptionPane.showMessageDialog(this, "Please fill in the blank(s)");
                refreshMovie(tblModel);
            }
            else{
                if(valPrice(price2) == false || price2.equals("0")){
                    JOptionPane.showMessageDialog(this, "Invalid Price Format");
                    refreshMovie(tblModel);
                    return;
                }
                if (imagelabel.getIcon() == null) {
                    JOptionPane.showMessageDialog(this, "Please insert a picture");
                    refreshMovie(tblModel);
                    return;
                }
                
                InputStream is = new FileInputStream(new File(p));

                PreparedStatement ps = db.getConnection().prepareStatement("INSERT INTO movie " + 
                        "(title, releasedate, casts, synopsis, duration, price, movietype, image) VALUES (?, ?, ?, ?, ? ,?, ?, ?);");
                ps.setString(1, title2);
                ps.setString(2, date2);
                ps.setString(3, casts2);
                ps.setString(4, synopsis2);
                ps.setString(5, duration2);
                ps.setString(6, price2);
                ps.setString(7, type2);
                ps.setBlob(8, is);   
                ps.executeUpdate();
                JOptionPane.showMessageDialog(this, "The movie added succesfully");

                //clear fill
                title1.setText("");
                //set to current date (default) after adding a movie
                try {
                    Date temp = new Date();
                    SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyy");
                    String tempdate = sdf.format(temp);
                    Date current = new SimpleDateFormat("dd-MM-yyy").parse(tempdate);
                    releasedate1.setDate(current);
                } catch (ParseException ex) {
                    Logger.getLogger(CustomerMenu.class.getName()).log(Level.SEVERE, null, ex);
                }
                casts1.setText("");
                synopsis1.setText("");
                duration1.setText("");
                price1.setText("");
                imagelabel.setIcon(null);

                //refresh movie table
                refreshMovie(tblModel);
                //refresh movie combo box
                movieComboBox();
            }
        } catch (SQLException | FileNotFoundException ex) {
            Logger.getLogger(StaffMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_AddMovieButtonActionPerformed

    private void MovieTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MovieTableMouseClicked
        //Store movie id to a temporary variable
        DefaultTableModel model = (DefaultTableModel)MovieTable.getModel();
        int selectedRowIndex = MovieTable.getSelectedRow();
        movieid_Remove = model.getValueAt(selectedRowIndex, 0).toString();
    }//GEN-LAST:event_MovieTableMouseClicked

    private void fnbtableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fnbtableMouseClicked
        DefaultTableModel model = (DefaultTableModel)fnbtable.getModel();
        int selectedRowIndex = fnbtable.getSelectedRow();
        foodid_Remove = model.getValueAt(selectedRowIndex, 0).toString();
    }//GEN-LAST:event_fnbtableMouseClicked

    private void deletemenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletemenuActionPerformed
        DefaultTableModel tblModel3 = (DefaultTableModel)fnbtable.getModel();
        deleteMenu(foodid_Remove);
        refreshMenu(tblModel3);
    }//GEN-LAST:event_deletemenuActionPerformed

    private void addMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMenuButtonActionPerformed
        DefaultTableModel tblModel3 = (DefaultTableModel)fnbtable.getModel();
        try{
            String menuname = menuName.getText();
            String menudescription = menuDescription.getText();
            String menuprice = menuPrice.getText();
            
            if(menuname.equals("") || menudescription.equals("") || menuprice.equals("")){
                JOptionPane.showMessageDialog(this, "Please fill in the blanks");
                refreshMenu(tblModel3);
                return;
            }
            else{
                if(valPrice(menuprice) == false || menuprice.equals("0")){
                    JOptionPane.showMessageDialog(this, "Invalid Price Format");
                    refreshMenu(tblModel3);
                    return;
                }
                
                Statement stm = db.getConnection().createStatement();
                String sql = "INSERT INTO food (fbname, description, price) VALUES ('" + menuname + "', '" + menudescription + "', '" + menuprice + "')";
                stm.executeUpdate(sql);
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(StaffMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        refreshMenu(tblModel3);
        
        menuName.setText("");
        menuDescription.setText("");
        menuPrice.setText("");
    }//GEN-LAST:event_addMenuButtonActionPerformed

    private void browseImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseImageActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        FileNameExtensionFilter filter = new FileNameExtensionFilter("*.IMAGE", "jpg", "gif", "png");
        fileChooser.addChoosableFileFilter(filter);
        int result = fileChooser.showSaveDialog(null);
        if(result == JFileChooser.APPROVE_OPTION){
            File selectedFile = fileChooser.getSelectedFile();
            String path = selectedFile.getAbsolutePath();
            imagelabel.setIcon(ResizeImage(path, imagelabel));
            p = path;
        }
        else if(result == JFileChooser.CANCEL_OPTION){}
    }//GEN-LAST:event_browseImageActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StaffMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StaffMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StaffMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StaffMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            }
        });
    }
    
    private void refreshMovie(DefaultTableModel tblModel){
        clearTable(tblModel);
        //refresh table 
        try{
            Statement stmt = db.getConnection().createStatement();
            String sql1 = "SELECT * FROM movie";
            ResultSet rs = stmt.executeQuery(sql1);
            while(rs.next()){
                String movieid = String.valueOf(rs.getInt("movieid"));
                String title = rs.getString("title");
                String rdate = rs.getString("releasedate");
                String casts = rs.getString("casts");
                String synopsis = rs.getString("synopsis");
                String duration = rs.getString("duration");
                String price = String.valueOf(rs.getInt("price"));
                String type = rs.getString("movietype");
                String tbData[] = {movieid, title, rdate, casts, synopsis, duration, price, type};
                tblModel.addRow(tbData);
            }
        } catch (SQLException ex) {
            Logger.getLogger(CustomerMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void clearTable(DefaultTableModel tblModel){
        int rowCount = tblModel.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            tblModel.removeRow(i);
        }
    }
    
    private void refreshShows(DefaultTableModel tblModel){
        clearTable(tblModel);
        
        try{
            Statement stm = db.getConnection().createStatement();
            //OR select * from ...
            String sql = "SELECT shows.showid, shows.movieid, movie.title, shows.theatreid, theatre.size, shows.showdate, shows.showtime, movie.price, movie.movietype\n" +
                         "FROM ((shows\n"+
                         "INNER JOIN movie ON shows.movieid = movie.movieid )\n"+
                         "INNER JOIN theatre ON shows.theatreid = theatre.theatreid);";
            ResultSet rs = stm.executeQuery(sql);
            while(rs.next()){
                String showid = String.valueOf(rs.getInt("shows.showid"));
                String movieid = String.valueOf(rs.getInt("shows.movieid"));
                String title = rs.getString("movie.title");
                String theatre = String.valueOf(rs.getInt("shows.theatreid"));
                String size = String.valueOf(rs.getInt("theatre.size"));
                String sdate = rs.getString("shows.showdate");
                String stime = rs.getString("shows.showtime");
                String price = String.valueOf(rs.getInt("movie.price"));
                String type = rs.getString("movie.movietype");   
                String tbData[] = {showid, movieid, title, theatre, size, sdate, stime, price, type};
                tblModel.addRow(tbData);
            }
        } catch (SQLException ex) {
            Logger.getLogger(CustomerMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void movieComboBox(){
        movie3.removeAllItems();
        try{
            ArrayList<String> movieid = new ArrayList<>();
            ArrayList<String> title = new ArrayList<>();
            Statement stm = db.getConnection().createStatement();
            String sql = "SELECT * FROM movie ORDER BY movieid ASC";
            ResultSet rs = stm.executeQuery(sql);
            while(rs.next()){
                movieid.add(String.valueOf(rs.getInt("movieid")));
                title.add(rs.getString("title"));
            }
            String[] combine = new String[movieid.size()];
            for(int i = 0; i < movieid.size(); i++){
                combine[i] = movieid.get(i) + " - " + title.get(i);
            }
            for(String item : combine){
                movie3.addItem(item);
            }
        } catch (SQLException ex) {
            Logger.getLogger(CustomerMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void deleteMovie(String movieid){
        
        try{
            Statement stm = db.getConnection().createStatement();
            String sql = "SELECT DISTINCT bookdetail.bookid \n" +
                         "FROM ((((((bookdetail\n" +
                         "INNER JOIN booking ON bookdetail.bookid = booking.bookid )\n" +
                         "INNER JOIN seat ON bookdetail.seatid = seat.seatid)\n" +
                         "LEFT JOIN food ON booking.fbid = food.fbid)\n" +
                         "INNER JOIN customer ON booking.ic = customer.ic)\n" +
                         "INNER JOIN shows ON seat.showid = shows.showid)\n" +
                         "INNER JOIN movie ON shows.movieid = movie.movieid)\n" +
                         "WHERE shows.movieid = '" + movieid + "';";
            ResultSet rs = stm.executeQuery(sql);
            while(rs.next()){
                String bookid = String.valueOf(rs.getInt("bookdetail.bookid"));
                
                //Delete bookdetail
                Statement stm1 = db.getConnection().createStatement();
                String sql1 = "DELETE FROM bookdetail WHERE bookid = '" + bookid + "'";
                stm1.executeUpdate(sql1);
                
                //Delete booking
                Statement stm2 = db.getConnection().createStatement();
                String sql2 = "DELETE FROM booking WHERE bookid = '" + bookid + "'";
                stm2.executeUpdate(sql2);
            }
            
            //Delete seat
            Statement stm3 = db.getConnection().createStatement();
            String sql3 = "DELETE seat\n" +
                          "FROM ((seat\n" +
                          "INNER JOIN shows ON seat.showid = shows.showid)\n" +
                          "INNER JOIN movie ON shows.movieid = movie.movieid)\n" +
                          "WHERE shows.movieid = '" + movieid + "';";
            stm3.executeUpdate(sql3);
            
            //Delete shows
            Statement stm4 = db.getConnection().createStatement();
            String sql4 = "DELETE shows\n" +
                          "FROM (shows\n" +
                          "INNER JOIN movie ON shows.movieid = movie.movieid)\n" +
                          "WHERE shows.movieid = '" + movieid + "';";
            stm4.executeUpdate(sql4);
            
            //Delete movie
            Statement stm5 = db.getConnection().createStatement();
            String sql5 = "DELETE FROM movie WHERE movieid = '" + movieid + "';";
            stm5.executeUpdate(sql5);
            
        } catch (SQLException ex) {
            Logger.getLogger(StaffMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void deleteShows(String showid){
        try{
            //select bookid from table
            Statement stm = db.getConnection().createStatement();
            String sql = "SELECT DISTINCT bookdetail.bookid\n" +
                         "FROM (((((bookdetail\n" +
                         "INNER JOIN booking ON bookdetail.bookid = booking.bookid )\n" +
                         "INNER JOIN seat ON bookdetail.seatid = seat.seatid)\n" +
                         "LEFT JOIN food ON booking.fbid = food.fbid)\n" +
                         "INNER JOIN customer ON booking.ic = customer.ic)\n" +
                         "INNER JOIN shows ON seat.showid = shows.showid)\n" +
                         "WHERE shows.showid = '" + showid + "';";
            ResultSet rs = stm.executeQuery(sql);
            while(rs.next()){
                String bookid = String.valueOf(rs.getInt("bookdetail.bookid"));
                
                //Delete bookdetail
                Statement stm1 = db.getConnection().createStatement();
                String sql1 = "DELETE FROM bookdetail WHERE bookid = '" + bookid + "'";
                stm1.executeUpdate(sql1);
                
                //Delete booking
                Statement stm2 = db.getConnection().createStatement();
                String sql2 = "DELETE FROM booking WHERE bookid = '" + bookid + "'";
                stm2.executeUpdate(sql2);
            }
            
            //Delete seat
            Statement stm3 = db.getConnection().createStatement();
            String sql3 = "DELETE seat\n" +
                          "FROM (seat\n" +
                          "INNER JOIN shows ON seat.showid = shows.showid)\n" +
                          "WHERE shows.showid = '" + showid + "';";
            stm3.executeUpdate(sql3);
            
            //Delete shows
            Statement stm4 = db.getConnection().createStatement();
            String sql4 = "DELETE FROM shows WHERE showid = '" + showid + "'";
            stm4.executeUpdate(sql4);
            
        } catch (SQLException ex) {
            Logger.getLogger(StaffMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void refreshMenu(DefaultTableModel tblModel){
        clearTable(tblModel);
        try{
            Statement stm = db.getConnection().createStatement();
            String sql = "SELECT * FROM food;";
            ResultSet rs = stm.executeQuery(sql);
            
            while(rs.next()){
                
                String fbid = String.valueOf(rs.getInt("fbid"));
                String name = rs.getString("fbname");
                String description = rs.getString("description");
                String price = String.valueOf(rs.getString("price"));
                String tbData[] = {fbid, name, description, price};
                tblModel.addRow(tbData);
            }
        }   catch (SQLException ex) {
            Logger.getLogger(StaffMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void deleteMenu(String foodid){
        try{
            //select menu from table
            Statement stm = db.getConnection().createStatement();
            String sql = "DELETE FROM food WHERE fbid = '" + foodid + "'";
            stm.executeUpdate(sql);
        } catch (SQLException ex) {
            Logger.getLogger(StaffMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private ImageIcon ResizeImage(String imgPath, JLabel imagelabel){
        ImageIcon MyImage = new ImageIcon(imgPath);
        Image img = MyImage.getImage();
        Image newImage = img.getScaledInstance(imagelabel.getWidth(), imagelabel.getHeight(),Image.SCALE_SMOOTH);
        ImageIcon image = new ImageIcon(newImage);
        return image;
    }
    
    private static boolean valTime(String time){
        String timeRegex = "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$";
        Pattern timePat = Pattern.compile(timeRegex, Pattern.CASE_INSENSITIVE);
        Matcher matcher = timePat.matcher(time);
        return matcher.find();
    }
    
    private static boolean valPrice(String price){
        String priceRegex = "^\\d{1,2}$";
        Pattern pricePat = Pattern.compile(priceRegex, Pattern.CASE_INSENSITIVE);
        Matcher matcher = pricePat.matcher(price);
        return matcher.find();
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddMovieButton;
    private javax.swing.JButton AddShowButton;
    private javax.swing.JButton ClearAddMovieFieldsButton;
    private javax.swing.JLabel GSCTitle;
    private javax.swing.JButton LogoutButton;
    private javax.swing.JTable MovieTable;
    private javax.swing.JButton RemoveSelectedMovieButton;
    private javax.swing.JButton RemoveSelectedShowButton;
    private javax.swing.JTable ShowTable;
    private javax.swing.JButton addMenuButton;
    private javax.swing.JButton browseImage;
    private javax.swing.JTextArea casts1;
    private javax.swing.JToggleButton deletemenu;
    private javax.swing.JTextField duration1;
    private javax.swing.JTable fnbtable;
    private javax.swing.JLabel imagelabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea menuDescription;
    private javax.swing.JTextField menuName;
    private javax.swing.JTextField menuPrice;
    private javax.swing.JComboBox<String> movie3;
    private javax.swing.JTextField price1;
    private javax.swing.JButton refreshMovieTableButton;
    private com.toedter.calendar.JDateChooser releasedate1;
    private com.toedter.calendar.JDateChooser sdate3;
    private javax.swing.JTextField stime3;
    private javax.swing.JTextArea synopsis1;
    private javax.swing.JComboBox<String> theatre3;
    private javax.swing.JTextField title1;
    private javax.swing.JComboBox<String> type1;
    private javax.swing.JLabel welcomestaff;
    // End of variables declaration//GEN-END:variables
}
